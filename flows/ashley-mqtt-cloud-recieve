[
  {
    "id": "6562e63f.67d168",
    "type": "tab",
    "label": "Ashley_MQTT Cloud Recieve",
    "disabled": false,
    "info": "This is essentially the reverse of the MQTT Factory control flow where now the data from the HBW is being recieved onto the cloud (the color of the part in what location)."
  },
  {
    "id": "15f05aa9.b70b3d",
    "type": "mqtt in",
    "z": "6562e63f.67d168",
    "name": "NFC Scan (fl/i/nfc/ds)",
    "topic": "fl/i/nfc/ds",
    "qos": "2",
    "datatype": "json",
    "broker": "9c4b29a6.e6aba8",
    "x": 140,
    "y": 320,
    "wires": [["dfcd7e1f.ab3b8"]]
  },
  {
    "id": "dfcd7e1f.ab3b8",
    "type": "function",
    "z": "6562e63f.67d168",
    "name": "Store Last Scanned UID",
    "func": "var uid = msg.payload.workpiece && msg.payload.workpiece.id ? msg.payload.workpiece.id : null;\nif (uid) {\n    flow.set(\"lastScannedUid\", uid);\n    flow.set(\"alreadySent\", false);\n    node.warn(\"Stored UID: \" + uid);\n}\nreturn null;",
    "outputs": 1,
    "noerr": 0,
    "x": 380,
    "y": 320,
    "wires": [[]]
  },
  {
    "id": "8074b095.136d6",
    "type": "mqtt in",
    "z": "6562e63f.67d168",
    "name": "Warehouse Stock Update (f/i/stock)",
    "topic": "f/i/stock",
    "qos": "1",
    "datatype": "json",
    "broker": "9c4b29a6.e6aba8",
    "x": 160,
    "y": 400,
    "wires": [["d7c8df11.0ab3e8"]]
  },
  {
    "id": "d7c8df11.0ab3e8",
    "type": "function",
    "z": "6562e63f.67d168",
    "name": "Match UID and Publish",
    "func": "let scannedUid = flow.get(\"lastScannedUid\");\nlet alreadySent = flow.get(\"alreadySent\") || false;\n\nif (!scannedUid || alreadySent) {\n    return null;\n}\n\nlet items = msg.payload.stockItems || [];\nfor (let i = 0; i < items.length; i++) {\n    let part = items[i].workpiece;\n    if (part && part.id === scannedUid) {\n        flow.set(\"lastScannedUid\", null);\n        flow.set(\"alreadySent\", true);\n        msg.payload = {\n            type: part.type.toLowerCase(),\n            location: items[i].location.toLowerCase(),\n            ts: new Date().toISOString()\n        };\n        node.warn(\"Matched UID: \" + scannedUid);\n        return msg;\n    }\n}\n\nnode.warn(\"UID not matched: \" + scannedUid);\nreturn null;",
    "outputs": 1,
    "noerr": 0,
    "x": 440,
    "y": 400,
    "wires": [["d3990b08.7705c", "a24dc74c.95d4c8"]]
  },
  {
    "id": "d3990b08.7705c",
    "type": "mqtt out",
    "z": "6562e63f.67d168",
    "name": "Publish to AWS IoT",
    "topic": "factory/warehouse/state",
    "qos": "1",
    "retain": "false",
    "broker": "788959e0.92f718",
    "x": 700,
    "y": 380,
    "wires": []
  },
  {
    "id": "a24dc74c.95d4c8",
    "type": "debug",
    "z": "6562e63f.67d168",
    "name": "AWS Payload Debug",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 700,
    "y": 440,
    "wires": []
  },
  {
    "id": "9c4b29a6.e6aba8",
    "type": "mqtt-broker",
    "name": "local_MQTT_Broker",
    "broker": "192.168.0.10",
    "port": "1883",
    "clientid": "",
    "usetls": false,
    "compatmode": false,
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "willTopic": "",
    "willQos": "0",
    "willPayload": ""
  },
  {
    "id": "788959e0.92f718",
    "type": "mqtt-broker",
    "z": "",
    "name": "",
    "broker": "a1m07g0lpmxynv-ats.iot.us-east-1.amazonaws.com",
    "port": "8883",
    "tls": "c1c8f379.d43cb",
    "clientid": "ft-node-red-client",
    "usetls": true,
    "compatmode": true,
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "willTopic": "",
    "willQos": "0",
    "willPayload": ""
  },
  {
    "id": "c1c8f379.d43cb",
    "type": "tls-config",
    "z": "",
    "name": "Fabian_TLS",
    "cert": "",
    "key": "",
    "ca": "",
    "certname": "5aedcffa759ed1d5f1509fb76d65eb4ad2ec0e930f363741dfa3803a1960f4f3-certificate.pem.crt",
    "keyname": "5aedcffa759ed1d5f1509fb76d65eb4ad2ec0e930f363741dfa3803a1960f4f3-private.pem.key",
    "caname": "AmazonRootCA1.pem",
    "servername": "",
    "verifyservercert": true
  }
]
